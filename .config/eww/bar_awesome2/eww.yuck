(
    defwindow aw2
    :monitor 0
    :exclusive "true"
    :stacking "overlay"
    :windowtype "dock"
    ;:reserve (struts :distance "64px" :side "top")
    :reserve (struts :distance "44px" :side "top")
    :wm-ignore false
    :geometry
    (
        geometry 
        :anchor "top center"
        :width "100%"
        :height "0px"
        :x "0"
        :y "0px"
    )
    (newbar)
)


(defwidget newbar []
  (centerbox :class "x-parent" :space-evenly "true" :orientation "h"
    (box :space-evenly "true" :class "newbar-box1" :space-evenly "false" :orientation "h" :halign "start"
        (whatmedia)
        (weather))
    (box :space-evenly "true" :class "newbar-box2" :space-evenly "false" :orientation "h" :halign "center"
        (tags))
        ;(numoftags))
    (sides)))

(defwidget sides []
    (box :class "end-box" :space-evenly "false" :orientation "h" :halign "end"
        (volum)
        ;(menu)
        ;(restart)
        ;(poweroff)
        (wifi)
        (time)))

(defwidget time []
  (box :class "time" :orientation "h" :space-evenly "true" :halign "end"
    time))

(defwidget volume []
  (box :class "volume" :orientation "h" :space-evenly "true" :halign "end"
    volume))

(defwidget poweroff []
  (
      box :class "volume" :orientation "h" :space-evenly "true" :halign "end"
      (
          button
          :class "poweroff"
          :onclick "shutdown now"
          "⏻"
      )
  )
)


(defwidget restart []
  (
      box :class "volume" :orientation "h" :space-evenly "true" :halign "end"
      (
          button
          :class "restart"
          :onclick "reboot"
          ""
      )
  )
)

(defwidget menu [] 
    (
        box :class "menu" :orientation "h" :space-evenly "true" :halign "end"
        (
            eventbox
            :onclick "./scripts/dashopen.sh"
            :tooltip "Menu On Hover"
            "󰕮"
        )
    )
)


(defwidget numoftags [] 
    (
        box :class "numoftags" :orientation "h" :space-evenly "true" :halign "end"
        (button :class "numoftags" :onclick "xdotool key super+space" numoftags)
    )
)


(
    defwidget tags []
    (
        literal :content tags_listen
    )
)

(
    defwidget whatmedia []
    (
        literal :content what_media
    )
)



(defwidget weather []
  (
      literal :content weather
  )
)


;;Volume
(defwidget volum []
  (eventbox :onhover "${eww} update volum=true"
        :halign "end"
        :onhoverlost "${eww} update volum=false" :class "slider"
  (box      :orientation "h"
        :space-evenly "false"
        ;:spacing "2"
        :class "slider volume-buttos"
  (revealer :transition "slideleft"
        :reveal volum
        :duration "550ms"
  (scale    :class "volbar"
        :value current-volume
        :orientation "h"
        :flipped false
        :tooltip "Volume: ${current-volume}%"
        :max 100
        :min 0
        ;:onchange "pactl set-sink-volume @DEFAULT_SINK@ +{}%"))
        :onchange "pamixer --set-volume {}"))
  ;(button   :onclick "scripts/popup audio"   :class "volume-icon" "${voluto}"))))
  (button   :onclick "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"   :class "volume-icon" "${voluto}"))))
;(defpoll current-volume :interval "1s" "pamixer --get-volume'")
(defpoll current-volume :interval "1s" "pamixer --get-volume")
(defpoll voluto :interval "1s" "./scripts/sb-vol")
(defvar volum false)
(defvar eww "/usr/local/bin/eww -c $HOME/.config/eww/bar_awesome2")
(defvar wifi_rev false)


;;Wifi
(defwidget wifi []
  (eventbox
        :onhover "eww open wifi-wid --config /home/termai/.config/eww/bar_herbstluftwm/widgets/wifi-wid"
        ;:onhoverlost "eww close wifi-wid --config /home/termai/.config/eww/bar_herbstluftwm/widgets/wifi-wid"
    (box :vexpand "false" :hexpand "false" :space-evenly "false" :class "wifi-slider"
        (button :class "wifi" :wrap "false" :limit-width 12 (literal :content wifi))
  (revealer :transition "slideright"
        ;:reveal wifi_rev
        :duration "1000ms"
  (literal :content wifi-wid)))))

;defpoll


(defpoll time :interval "1s"
              :initial "initial-value"  ; optional, defaults to poll at startup
              :run-while time-visible   ; optional, defaults to 'true'
  `./scripts/time`)

(defpoll volume :interval "1s"
              :initial "initial-value"  ; optional, defaults to poll at startup
              :run-while time-visible   ; optional, defaults to 'true'
  `./scripts/sb-vol`)


(defpoll numoftags :interval "1s"
              :initial "initial-value"  ; optional, defaults to poll at startup
              :run-while time-visible   ; optional, defaults to 'true'
  `./scripts/numoftags.sh`)

(defpoll what_media :interval "1s"
              :initial "initial-value"  ; optional, defaults to poll at startup
              :run-while time-visible   ; optional, defaults to 'true'
  `./scripts/new2.sh wait_media`)

(defpoll weather :interval "1s"
              :initial "initial-value"  ; optional, defaults to poll at startup
              :run-while time-visible   ; optional, defaults to 'true'
  `./scripts/weath.sh`)

(defpoll wifi :interval "1s"
              :initial "initial-value"  ; optional, defaults to poll at startup
              :run-while time-visible   ; optional, defaults to 'true'
  `./scripts/new2.sh is_wifi`)


(defpoll wifi-wid :interval "1s" :initial "initial-value" :run-while time-visible `./scripts/togwifi`)

;deflisten

(deflisten tags_listen "./scripts/tags.sh" )

;Widgets





